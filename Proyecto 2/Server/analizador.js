/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,19],$V2=[1,20],$V3=[1,31],$V4=[1,32],$V5=[1,33],$V6=[1,34],$V7=[1,35],$V8=[1,36],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,28],$Vd=[1,26],$Ve=[1,27],$Vf=[1,29],$Vg=[1,30],$Vh=[5,42,57,58,61,63,64,65,66,67,68,71,72,73,74,75,76,81,82,86,87],$Vi=[1,54],$Vj=[1,53],$Vk=[1,55],$Vl=[1,52],$Vm=[1,58],$Vn=[1,61],$Vo=[1,62],$Vp=[1,63],$Vq=[1,64],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,73],$Vy=[1,75],$Vz=[39,42],$VA=[8,38,70],$VB=[2,66],$VC=[1,98],$VD=[1,97],$VE=[1,99],$VF=[1,100],$VG=[1,101],$VH=[1,102],$VI=[1,103],$VJ=[1,104],$VK=[1,105],$VL=[1,106],$VM=[1,107],$VN=[1,108],$VO=[1,109],$VP=[1,110],$VQ=[8,24,25,26,27,28,38,39,43,44,46,47,48,49,50,51,52,53,59],$VR=[8,59],$VS=[8,39],$VT=[38,39],$VU=[5,42,57,58,61,62,63,64,65,66,67,68,71,72,73,74,75,76,81,82,86,87],$VV=[8,38,39,43,44,59],$VW=[8,24,25,38,39,43,44,46,47,48,49,50,51,52,53,59],$VX=[8,38,39,43,44,46,47,48,49,50,51,52,53,59],$VY=[1,174],$VZ=[1,175],$V_=[57,86,87];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"cout":7,"PYC":8,"if_g":9,"declaracion":10,"asignacion":11,"ciclo_while":12,"instruccion_break":13,"instruccion_continue":14,"ciclo_do_while":15,"incremento":16,"for_g":17,"declaracion_metodo":18,"acceso_metodo":19,"instruccion_return":20,"execute":21,"switch_g":22,"expresion":23,"RES":24,"MAS":25,"MUL":26,"DIV":27,"MOD":28,"ENTERO":29,"DOUBLE":30,"CADENA":31,"CARACTER":32,"TRUE":33,"FALSE":34,"ENDL":35,"POW":36,"PARIZQ":37,"COMA":38,"PARDER":39,"relacionales":40,"logico":41,"ID":42,"INTERROGACION":43,"DOSPUNTOS":44,"tipos_datos":45,"IGUAL":46,"DISTINTO":47,"MENOR":48,"MENORIGUAL":49,"MAYOR":50,"MAYORIGUAL":51,"AND":52,"OR":53,"NOT":54,"bloque":55,"LLAVEIZQ":56,"LLAVEDER":57,"COUT":58,"OUTPUT":59,"lista_expresiones":60,"IF":61,"ELSE":62,"INT":63,"DOUBLE_ID":64,"BOOL":65,"CHAR":66,"CADENA_ID":67,"VOID":68,"lista_ids":69,"ASIGNACION":70,"WHILE":71,"BREAK":72,"CONTINUE":73,"RETURN":74,"DO":75,"FOR":76,"actalizacion":77,"lista_parametros":78,"parametro":79,"lista_parametros_acceso":80,"EXECUTE":81,"SWITCH":82,"bloque_case":83,"casos":84,"caso":85,"CASE":86,"DEFAULT":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",24:"RES",25:"MAS",26:"MUL",27:"DIV",28:"MOD",29:"ENTERO",30:"DOUBLE",31:"CADENA",32:"CARACTER",33:"TRUE",34:"FALSE",35:"ENDL",36:"POW",37:"PARIZQ",38:"COMA",39:"PARDER",42:"ID",43:"INTERROGACION",44:"DOSPUNTOS",46:"IGUAL",47:"DISTINTO",48:"MENOR",49:"MENORIGUAL",50:"MAYOR",51:"MAYORIGUAL",52:"AND",53:"OR",54:"NOT",56:"LLAVEIZQ",57:"LLAVEDER",58:"COUT",59:"OUTPUT",61:"IF",62:"ELSE",63:"INT",64:"DOUBLE_ID",65:"BOOL",66:"CHAR",67:"CADENA_ID",68:"VOID",70:"ASIGNACION",71:"WHILE",72:"BREAK",73:"CONTINUE",74:"RETURN",75:"DO",76:"FOR",81:"EXECUTE",82:"SWITCH",86:"CASE",87:"DEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,6],[23,3],[23,1],[23,1],[23,1],[23,5],[23,1],[23,4],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[41,3],[41,3],[41,2],[55,3],[55,2],[7,3],[60,3],[60,1],[9,5],[9,7],[9,7],[16,3],[16,3],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[69,3],[69,1],[10,4],[10,2],[11,3],[12,5],[13,1],[14,1],[20,2],[20,1],[15,6],[17,9],[77,1],[77,1],[18,6],[18,5],[78,3],[78,1],[79,2],[80,3],[80,1],[19,4],[19,3],[21,2],[22,5],[83,3],[84,2],[84,1],[85,4],[85,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new AST($$[$0-1]);
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
 this.$ =  [$$[$0]];
break;
case 4: case 6: case 7: case 9: case 10: case 12: case 15: case 16: case 17:
 this.$ = $$[$0-1];
break;
case 5: case 8: case 11: case 13: case 14: case 18:
 this.$ = $$[$0];
break;
case 19:
 this.$ = new Aritmetica(new Primitivo(0, TipoDatos.ENTERO, false, this._$.first_line, this._$.first_column), $$[$0], OperadorAritmetico.RESTA, lexer.yylineno, lexer.yyleng); 
break;
case 20:
 this.$ = new Aritmetica($$[$0-2], $$[$0], OperadorAritmetico.SUMA, this._$.first_line, this._$.first_column);
break;
case 21:
 this.$ = new Aritmetica($$[$0-2], $$[$0], OperadorAritmetico.RESTA, this._$.first_line, this._$.first_column); 
break;
case 22:
 this.$ = new Aritmetica($$[$0-2], $$[$0], OperadorAritmetico.MULTIPLICACION, this._$.first_line, this._$.first_column);
break;
case 23:
 this.$ =  new Aritmetica($$[$0-2], $$[$0], OperadorAritmetico.DIVISION, this._$.first_line, this._$.first_column); 
break;
case 24:
 this.$ = new Aritmetica($$[$0-2], $$[$0], OperadorAritmetico.MODULO, this._$.first_line, this._$.first_column); 
break;
case 25:
 this.$ = new Primitivo($$[$0], TipoDatos.ENTERO, false, this._$.first_line, this._$.first_column); 
break;
case 26:
 this.$ =  new Primitivo($$[$0], TipoDatos.DOBLE, false, this._$.first_line, this._$.first_column); 
break;
case 27:
 this.$ = new Primitivo($$[$0], TipoDatos.CADENA, false, this._$.first_line, this._$.first_column); 
break;
case 28:
 this.$ = new Primitivo($$[$0], TipoDatos.CARACTER, false, this._$.first_line, this._$.first_column); 
break;
case 29: case 30:
 this.$ = new Primitivo($$[$0], TipoDatos.BOOLEANO, false, this._$.first_line, this._$.first_column); 
break;
case 31:
 this.$ = new Primitivo("\n", TipoDatos.CADENA, false, this._$.first_line, this._$.first_column); 
break;
case 32:
 this.$ = new Aritmetica($$[$0-3], $$[$0-1], OperadorAritmetico.POTENCIA, this._$.first_line, this._$.first_column); 
break;
case 33: case 90:
 this.$ = $$[$0-1]; 
break;
case 34: case 35: case 38:
 this.$ = $$[$0]; 
break;
case 36:
 this.$ = new Acceso($$[$0], this._$.first_line, this._$.first_column); 
break;
case 37:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 39:
 this.$ = new Casteo($$[$0], $$[$0-2], true, this._$.first_line, this._$.first_column); 
break;
case 40:
 this.$ = new Relacional($$[$0-2], $$[$0], OperadorRelacional.IGUAL, this._$.first_line, this._$.first_column); 
break;
case 41:
 this.$ = new Relacional($$[$0-2], $$[$0], OperadorRelacional.DIFERENTE, this._$.first_line, this._$.first_column); 
break;
case 42:
 this.$ = new Relacional($$[$0-2], $$[$0], OperadorRelacional.MENOR, this._$.first_line, this._$.first_column); 
break;
case 43:
 this.$ = new Relacional($$[$0-2], $$[$0], OperadorRelacional.MENORIGUAL, this._$.first_line, this._$.first_column); 
break;
case 44:
 this.$ = new Relacional($$[$0-2], $$[$0], OperadorRelacional.MAYOR, this._$.first_line, this._$.first_column); 
break;
case 45:
 this.$ = new Relacional($$[$0-2], $$[$0], OperadorRelacional.MAYORIGUAL, this._$.first_line, this._$.first_column); 
break;
case 46:
 this.$ = new Logico($$[$0-2], $$[$0], OperadorLogico.AND, this._$.first_line, this._$.first_column); 
break;
case 47:
 this.$ = new Logico($$[$0-2], $$[$0], OperadorLogico.OR, this._$.first_line, this._$.first_column); 
break;
case 48:
 this.$ = new Logico(null, $$[$0], OperadorLogico.NOT, this._$.first_line, this._$.first_column); 
break;
case 49:
 this.$ = new Bloque($$[$0-1], 0, 0); 
break;
case 50:
 this.$ = new Bloque([], 0, 0); 
break;
case 51:
this.$ = new Cout($$[$0], this._$.first_line, this._$.first_column);
break;
case 52:
 this.$.push($$[$0]); this.$ = $$[$0-2];
break;
case 53: case 66: case 82: case 85: case 92:
 this.$ = [$$[$0]]; 
break;
case 54:
 this.$ = new Fn_IF($$[$0-2], $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 55: case 56:
 this.$ = new Fn_IF($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 57:
 this.$ = new Incremento($$[$0-2], this._$.first_line, this._$.first_column);
break;
case 58:
 this.$ = new Decremento($$[$0-2], this._$.first_line, this._$.first_column);
break;
case 59:
 this.$ = TipoDatos.ENTERO; 
break;
case 60:
 this.$ = TipoDatos.DOBLE; 
break;
case 61:
 this.$ = TipoDatos.BOOLEANO; 
break;
case 62:
 this.$ = TipoDatos.CARACTER; 
break;
case 63:
 this.$ = TipoDatos.CADENA; 
break;
case 64:
 this.$ = TipoDatos.VOID; 
break;
case 65: case 81: case 84:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 67:
 this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 68:
 this.$ = new Declaracion($$[$0-1], $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 69:
 this.$ = new Asignacion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 70:
 this.$ = new CWhile($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = new Break(this._$.first_line, this._$.first_column); 
break;
case 72:
 this.$ = new Continue(this._$.first_line, this._$.first_column); 
break;
case 73:
 this.$ = new Return($$[$0], this._$.first_line, this._$.first_column); 
break;
case 74:
 this.$ = new Return(null, this._$.first_line, this._$.first_column); 
break;
case 75:
 this.$ = new DoWhile($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 76:
 this.$ = new CFor($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 79:
 this.$ = new Funcion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 80:
 this.$ = new Funcion($$[$0-4], $$[$0-3], [], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 83:
 this.$ = {id: $$[$0], tipo: $$[$0-1], valor: null}; 
break;
case 86:
 this.$ = new Llamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 87:
 this.$ = new Llamada($$[$0-2], [], this._$.first_line, this._$.first_column); 
break;
case 88:
 this.$ = new Execute($$[$0], this._$.first_line, this._$.first_column); 
break;
case 89:
 this.$ = new Switch($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 91:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 93:
 this.$ = {expresion: $$[$0-2], instrucciones: new Bloque($$[$0], 0, 0)}; 
break;
case 94:
 this.$ = {expresion: null, instrucciones: new Bloque($$[$0], 0, 0)}; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,42:$V0,45:21,58:$V1,61:$V2,63:$V3,64:$V4,65:$V5,66:$V6,67:$V7,68:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,81:$Vf,82:$Vg},{1:[3]},{5:[1,37],6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,42:$V0,45:21,58:$V1,61:$V2,63:$V3,64:$V4,65:$V5,66:$V6,67:$V7,68:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,81:$Vf,82:$Vg},o($Vh,[2,3]),{8:[1,39]},o($Vh,[2,5]),{8:[1,40]},{8:[1,41]},o($Vh,[2,8]),{8:[1,42]},{8:[1,43]},o($Vh,[2,11]),{8:[1,44]},o($Vh,[2,13]),o($Vh,[2,14]),{8:[1,45]},{8:[1,46]},{8:[1,47]},o($Vh,[2,18]),{59:[1,48]},{37:[1,49]},{42:[1,51],69:50},{24:$Vi,25:$Vj,37:$Vk,70:$Vl},{37:[1,56]},{8:[2,71]},{8:[2,72]},{55:57,56:$Vm},{37:[1,59]},{8:[2,74],19:74,23:60,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:76,42:[1,77]},{37:[1,78]},o($Vz,[2,59]),o($Vz,[2,60]),o($Vz,[2,61]),o($Vz,[2,62]),o($Vz,[2,63]),o($Vz,[2,64]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,4]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,12]),o($Vh,[2,15]),o($Vh,[2,16]),o($Vh,[2,17]),{19:74,23:80,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy,60:79},{19:74,23:81,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{8:[2,68],38:[1,83],70:[1,82]},o($VA,$VB,{37:[1,84]}),{19:74,23:85,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{25:[1,86]},{24:[1,87]},{19:74,23:90,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,39:[1,89],40:71,41:72,42:$Vx,54:$Vy,80:88},{19:74,23:91,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{71:[1,92]},{4:93,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,42:$V0,45:21,57:[1,94],58:$V1,61:$V2,63:$V3,64:$V4,65:$V5,66:$V6,67:$V7,68:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,81:$Vf,82:$Vg},{10:95,45:96,63:$V3,64:$V4,65:$V5,66:$V6,67:$V7,68:$V8},{8:[2,73],24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP},{19:74,23:111,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},o($VQ,[2,25]),o($VQ,[2,26]),o($VQ,[2,27]),o($VQ,[2,28]),o($VQ,[2,29]),o($VQ,[2,30]),o($VQ,[2,31]),{37:[1,112]},{19:74,23:113,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,45:114,54:$Vy,63:$V3,64:$V4,65:$V5,66:$V6,67:$V7,68:$V8},o($VQ,[2,34]),o($VQ,[2,35]),o($VQ,[2,36],{37:$Vk}),o($VQ,[2,38]),{19:74,23:115,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{8:[2,88]},{37:$Vk},{19:74,23:116,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{8:[2,51],59:[1,117]},o($VR,[2,53],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP}),{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,39:[1,118],43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP},{19:74,23:119,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{42:[1,120]},{39:[1,122],45:124,63:$V3,64:$V4,65:$V5,66:$V6,67:$V7,68:$V8,78:121,79:123},o($VS,[2,69],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP}),o($VS,[2,57]),o($VS,[2,58]),{38:[1,126],39:[1,125]},o($VQ,[2,87]),o($VT,[2,85],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP}),{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,39:[1,127],43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP},{37:[1,128]},{6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,42:$V0,45:21,57:[1,129],58:$V1,61:$V2,63:$V3,64:$V4,65:$V5,66:$V6,67:$V7,68:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,81:$Vf,82:$Vg},o($VU,[2,50]),{8:[1,130]},{42:[1,131],69:50},{19:74,23:132,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:133,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:134,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:135,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:136,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:137,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:138,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:139,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:140,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:141,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:142,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:143,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:144,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:145,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},o($VQ,[2,19]),{19:74,23:146,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,39:[1,147],43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP},{39:[1,148]},o($VV,[2,48],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP}),{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,39:[1,149],43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP},{19:74,23:150,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{55:151,56:$Vm},{8:[2,67],24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP},o($VA,[2,65]),{38:[1,153],39:[1,152]},{55:154,56:$Vm},o($VT,[2,82]),{42:[1,155]},o($VQ,[2,86]),{19:74,23:156,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{55:157,56:$Vm},{19:74,23:158,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},o($VU,[2,49]),{19:74,23:159,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},o($VA,$VB),o($VW,[2,20],{26:$VE,27:$VF,28:$VG}),o($VW,[2,21],{26:$VE,27:$VF,28:$VG}),o($VQ,[2,22]),o($VQ,[2,23]),o($VQ,[2,24]),{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,43:$VH,44:[1,160],46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP},o($VX,[2,40],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG}),o($VX,[2,41],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG}),o($VX,[2,42],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG}),o($VX,[2,43],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG}),o($VX,[2,44],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG}),o($VX,[2,45],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG}),o([8,38,39,43,44,52,53,59],[2,46],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN}),o([8,38,39,43,44,53,59],[2,47],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO}),{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,38:[1,161],43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP},o($VQ,[2,33]),{19:74,23:162,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{56:[1,164],83:163},o($VR,[2,52],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP}),o($Vh,[2,54],{62:[1,165]}),{55:166,56:$Vm},{45:124,63:$V3,64:$V4,65:$V5,66:$V6,67:$V7,68:$V8,79:167},o($Vh,[2,80]),o($VT,[2,83]),o($VT,[2,84],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP}),o($Vh,[2,70]),{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,39:[1,168],43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP},{8:[1,169],24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP},{19:74,23:170,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{19:74,23:171,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},o([8,38,39,44,59],[2,39],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP}),o($Vh,[2,89]),{84:172,85:173,86:$VY,87:$VZ},{9:177,55:176,56:$Vm,61:$V2},o($Vh,[2,79]),o($VT,[2,81]),o($Vh,[2,75]),{11:180,16:179,42:[1,181],77:178},o($VV,[2,37],{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP}),{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,39:[1,182],43:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP},{57:[1,183],85:184,86:$VY,87:$VZ},o($V_,[2,92]),{19:74,23:185,24:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,37:$Vw,40:71,41:72,42:$Vx,54:$Vy},{44:[1,186]},o($Vh,[2,55]),o($Vh,[2,56]),{39:[1,187]},{39:[2,77]},{39:[2,78]},{24:$Vi,25:$Vj,70:$Vl},o($VQ,[2,32]),o($Vh,[2,90]),o($V_,[2,91]),{24:$VC,25:$VD,26:$VE,27:$VF,28:$VG,43:$VH,44:[1,188],46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN,52:$VO,53:$VP},{4:189,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,42:$V0,45:21,58:$V1,61:$V2,63:$V3,64:$V4,65:$V5,66:$V6,67:$V7,68:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,81:$Vf,82:$Vg},{55:190,56:$Vm},{4:191,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,42:$V0,45:21,58:$V1,61:$V2,63:$V3,64:$V4,65:$V5,66:$V6,67:$V7,68:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,81:$Vf,82:$Vg},o($V_,[2,94],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,45:21,6:38,42:$V0,58:$V1,61:$V2,63:$V3,64:$V4,65:$V5,66:$V6,67:$V7,68:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,81:$Vf,82:$Vg}),o($Vh,[2,76]),o($V_,[2,93],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,45:21,6:38,42:$V0,58:$V1,61:$V2,63:$V3,64:$V4,65:$V5,66:$V6,67:$V7,68:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,81:$Vf,82:$Vg})],
defaultActions: {24:[2,71],25:[2,72],37:[2,1],76:[2,88],179:[2,77],180:[2,78]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // Importar librerías
    const {Aritmetica}= require('./dist/src/expresion/Aritmetica');
    const {Primitivo} = require('./dist/src/expresion/Primitivo');
    const {Relacional} = require('./dist/src/expresion/Relacional');
    const {Resultado, OperadorAritmetico, TipoDatos, OperadorRelacional, OperadorLogico, variables} = require('./dist/src/expresion/Resultado');
    const {AST} = require('./dist/src/AST');
    const {Cout} = require('./dist/src/instruccion/Cout');
    const {Logico} = require('./dist/src/expresion/Logico');
    const {Bloque} = require('./dist/src/instruccion/Bloque');
    const {Fn_IF} = require('./dist/src/instruccion/control/Fn_IF');
    const {Acceso} = require('./dist/src/expresion/Acceso');
    const {Asignacion} = require('./dist/src/instruccion/Asignacion');
    const {Declaracion} = require('./dist/src/instruccion/definiciones/Declaracion');
    const {Break} = require('./dist/src/instruccion/control/Break');
    const {CWhile} = require('./dist/src/instruccion/ciclos/While');
    const {Continue} = require('./dist/src/instruccion/control/Continue');
    const {DoWhile} = require('./dist/src/instruccion/ciclos/DoWhile');
    const {Ternario} = require('./dist/src/expresion/Ternario');
    const {Incremento} = require('./dist/src/instruccion/Incremento');
    const {Decremento} = require('./dist/src/instruccion/Decremento');
    const {CFor} = require('./dist/src/instruccion/ciclos/For');
    const {Llamada} = require('./dist/src/instruccion/Llamada');
    const {Funcion} = require('./dist/src/instruccion/definiciones/Funcion');
        const {Return} = require('./dist/src/instruccion/control/Return');
        const {Execute} = require('./dist/src/instruccion/Execute');
        const {Switch} = require('./dist/src/instruccion/control/Switch');
        const {Casteo} = require('./dist/src/expresion/Casteo');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1:console.log("Comentario")
break;
case 2:console.log("Comentario Multilinea")
break;
case 3:return 63;
break;
case 4:return 64;
break;
case 5:return 65;
break;
case 6:return 66;
break;
case 7:return 67;
break;
case 8:return 'EXEC';
break;
case 9:return 33;
break;
case 10:return 34;
break;
case 11:return 36;
break;
case 12:return 37;
break;
case 13:return 39;
break;
case 14:return 38;
break;
case 15:return 28;
break;
case 16:return 46;
break;
case 17:return 47;
break;
case 18:return 59;
break;
case 19:return 49;
break;
case 20:return 48;
break;
case 21:return 51;
break;
case 22:return 50;
break;
case 23:return 70;
break;
case 24:return 43;
break;
case 25:return 44;
break;
case 26:return 52;
break;
case 27:return 53;
break;
case 28:return 54;
break;
case 29:return 56;
break;
case 30:return 57;
break;
case 31:return 'CORIZQ';
break;
case 32:return 'CORDER';
break;
case 33:return 'NEW';
break;
case 34:return 61;
break;
case 35:return 62;
break;
case 36:return 82;
break;
case 37:return 86;
break;
case 38:return 87;
break;
case 39:return 72;
break;
case 40:return 71;
break;
case 41:return 76;
break;
case 42:return 75;
break;
case 43:return 73;
break;
case 44:return 74;
break;
case 45:return 68;
break;
case 46:return 58;
break;
case 47:return 'TOLOWER';
break;
case 48:return 'TOUPPER';
break;
case 49:return 'ROUND';
break;
case 50:return 'LENGTH';
break;
case 51:return 'TYPEOF';
break;
case 52:return 35;
break;
case 53:return 'TOSTRING';
break;
case 54:return 'C_STR';
break;
case 55:return 81;
break;
case 56:return 25;
break;
case 57:return 24;
break;
case 58:return 26;
break;
case 59:return 27;
break;
case 60:return 8;
break;
case 61: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 32; 
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 31; 
break;
case 63:return 30;
break;
case 64:return 29;
break;
case 65:return 42;
break;
case 66:return 5;
break;
case 67:    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/[\s\S]*?\n)/i,/^(?:\/\*[\s\S]*?\*\/)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:EXEC\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:pow\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<<)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:endl\b)/i,/^(?:tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:'(?:\\.|[^\'])*')/i,/^(?:"(?:\\.|[^\"])*")/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}