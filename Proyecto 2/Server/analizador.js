/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,18],$V2=[1,19],$V3=[1,29],$V4=[1,30],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,34],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,27],$Vd=[1,25],$Ve=[1,26],$Vf=[1,28],$Vg=[5,41,55,56,59,62,63,64,65,66,67,70,71,72,73,74,75,80],$Vh=[1,52],$Vi=[1,51],$Vj=[1,53],$Vk=[1,50],$Vl=[1,56],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,71],$Vx=[1,73],$Vy=[8,37,69],$Vz=[2,64],$VA=[1,95],$VB=[1,94],$VC=[1,96],$VD=[1,97],$VE=[1,98],$VF=[1,99],$VG=[1,100],$VH=[1,101],$VI=[1,102],$VJ=[1,103],$VK=[1,104],$VL=[1,105],$VM=[1,106],$VN=[1,107],$VO=[8,23,24,25,26,27,37,38,42,43,44,45,46,47,48,49,50,51,57],$VP=[8,57],$VQ=[8,38],$VR=[37,38],$VS=[5,41,55,56,59,60,62,63,64,65,66,67,70,71,72,73,74,75,80],$VT=[8,37,38,42,43,57],$VU=[8,23,24,37,38,42,43,44,45,46,47,48,49,50,51,57],$VV=[8,37,38,42,43,44,45,46,47,48,49,50,51,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"cout":7,"PYC":8,"if_g":9,"declaracion":10,"asignacion":11,"ciclo_while":12,"instruccion_break":13,"instruccion_continue":14,"ciclo_do_while":15,"incremento":16,"for_g":17,"declaracion_metodo":18,"acceso_metodo":19,"instruccion_return":20,"execute":21,"expresion":22,"RES":23,"MAS":24,"MUL":25,"DIV":26,"MOD":27,"ENTERO":28,"DOUBLE":29,"CADENA":30,"CARACTER":31,"TRUE":32,"FALSE":33,"ENDL":34,"POW":35,"PARIZQ":36,"COMA":37,"PARDER":38,"relacionales":39,"logico":40,"ID":41,"INTERROGACION":42,"DOSPUNTOS":43,"IGUAL":44,"DISTINTO":45,"MENOR":46,"MENORIGUAL":47,"MAYOR":48,"MAYORIGUAL":49,"AND":50,"OR":51,"NOT":52,"bloque":53,"LLAVEIZQ":54,"LLAVEDER":55,"COUT":56,"OUTPUT":57,"lista_expresiones":58,"IF":59,"ELSE":60,"tipos_datos":61,"INT":62,"DOUBLE_ID":63,"BOOL":64,"CHAR":65,"CADENA_ID":66,"VOID":67,"lista_ids":68,"ASIGNACION":69,"WHILE":70,"BREAK":71,"CONTINUE":72,"RETURN":73,"DO":74,"FOR":75,"actalizacion":76,"lista_parametros":77,"parametro":78,"lista_parametros_acceso":79,"EXECUTE":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYC",23:"RES",24:"MAS",25:"MUL",26:"DIV",27:"MOD",28:"ENTERO",29:"DOUBLE",30:"CADENA",31:"CARACTER",32:"TRUE",33:"FALSE",34:"ENDL",35:"POW",36:"PARIZQ",37:"COMA",38:"PARDER",41:"ID",42:"INTERROGACION",43:"DOSPUNTOS",44:"IGUAL",45:"DISTINTO",46:"MENOR",47:"MENORIGUAL",48:"MAYOR",49:"MAYORIGUAL",50:"AND",51:"OR",52:"NOT",54:"LLAVEIZQ",55:"LLAVEDER",56:"COUT",57:"OUTPUT",59:"IF",60:"ELSE",62:"INT",63:"DOUBLE_ID",64:"BOOL",65:"CHAR",66:"CADENA_ID",67:"VOID",69:"ASIGNACION",70:"WHILE",71:"BREAK",72:"CONTINUE",73:"RETURN",74:"DO",75:"FOR",80:"EXECUTE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,2],[6,2],[6,1],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,6],[22,3],[22,1],[22,1],[22,1],[22,5],[22,1],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[40,3],[40,3],[40,2],[53,3],[53,2],[7,3],[58,3],[58,1],[9,5],[9,7],[9,7],[16,3],[16,3],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[68,3],[68,1],[10,4],[10,2],[11,3],[12,5],[13,1],[14,1],[20,2],[20,1],[15,6],[17,9],[76,1],[76,1],[18,6],[18,5],[77,3],[77,1],[78,2],[79,3],[79,1],[19,4],[19,3],[21,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new AST($$[$0-1]);
break;
case 2:
  $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
 this.$ =  [$$[$0]];
break;
case 4: case 6: case 7: case 9: case 10: case 12: case 15: case 16: case 17:
 this.$ = $$[$0-1];
break;
case 5: case 8: case 11: case 13: case 14:
 this.$ = $$[$0];
break;
case 18:
 this.$ = new Aritmetica(new Primitivo(0, TipoDatos.ENTERO, this._$.first_line, this._$.first_column), $$[$0], OperadorAritmetico.RESTA, lexer.yylineno, lexer.yyleng); 
break;
case 19:
 this.$ = new Aritmetica($$[$0-2], $$[$0], OperadorAritmetico.SUMA, this._$.first_line, this._$.first_column);
break;
case 20:
 this.$ = new Aritmetica($$[$0-2], $$[$0], OperadorAritmetico.RESTA, this._$.first_line, this._$.first_column); 
break;
case 21:
 this.$ = new Aritmetica($$[$0-2], $$[$0], OperadorAritmetico.MULTIPLICACION, this._$.first_line, this._$.first_column);
break;
case 22:
 this.$ =  new Aritmetica($$[$0-2], $$[$0], OperadorAritmetico.DIVISION, this._$.first_line, this._$.first_column); 
break;
case 23:
 this.$ = new Aritmetica($$[$0-2], $$[$0], OperadorAritmetico.MODULO, this._$.first_line, this._$.first_column); 
break;
case 24:
 this.$ = new Primitivo($$[$0], TipoDatos.ENTERO, this._$.first_line, this._$.first_column); 
break;
case 25:
 this.$ =  new Primitivo($$[$0], TipoDatos.DOBLE, this._$.first_line, this._$.first_column); 
break;
case 26:
 this.$ = new Primitivo($$[$0], TipoDatos.CADENA, this._$.first_line, this._$.first_column); 
break;
case 27:
 this.$ = new Primitivo($$[$0], TipoDatos.CARACTER, this._$.first_line, this._$.first_column); 
break;
case 28: case 29:
 this.$ = new Primitivo($$[$0], TipoDatos.BOOLEANO, this._$.first_line, this._$.first_column); 
break;
case 30:
 this.$ = new Primitivo("\n", TipoDatos.CADENA, this._$.first_line, this._$.first_column); 
break;
case 31:
 this.$ = new Aritmetica($$[$0-3], $$[$0-1], OperadorAritmetico.POTENCIA, this._$.first_line, this._$.first_column); 
break;
case 32:
 this.$ = $$[$0-1]; 
break;
case 33: case 34: case 37:
 this.$ = $$[$0]; 
break;
case 35:
 this.$ = new Acceso($$[$0], this._$.first_line, this._$.first_column); 
break;
case 36:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 38:
 this.$ = new Relacional($$[$0-2], $$[$0], OperadorRelacional.IGUAL, this._$.first_line, this._$.first_column); 
break;
case 39:
 this.$ = new Relacional($$[$0-2], $$[$0], OperadorRelacional.DIFERENTE, this._$.first_line, this._$.first_column); 
break;
case 40:
 this.$ = new Relacional($$[$0-2], $$[$0], OperadorRelacional.MENOR, this._$.first_line, this._$.first_column); 
break;
case 41:
 this.$ = new Relacional($$[$0-2], $$[$0], OperadorRelacional.MENORIGUAL, this._$.first_line, this._$.first_column); 
break;
case 42:
 this.$ = new Relacional($$[$0-2], $$[$0], OperadorRelacional.MAYOR, this._$.first_line, this._$.first_column); 
break;
case 43:
 this.$ = new Relacional($$[$0-2], $$[$0], OperadorRelacional.MAYORIGUAL, this._$.first_line, this._$.first_column); 
break;
case 44:
 this.$ = new Logico($$[$0-2], $$[$0], OperadorLogico.AND, this._$.first_line, this._$.first_column); 
break;
case 45:
 this.$ = new Logico($$[$0-2], $$[$0], OperadorLogico.OR, this._$.first_line, this._$.first_column); 
break;
case 46:
 this.$ = new Logico(null, $$[$0], OperadorLogico.NOT, this._$.first_line, this._$.first_column); 
break;
case 47:
 this.$ = new Bloque($$[$0-1], 0, 0); 
break;
case 48:
 this.$ = new Bloque([], 0, 0); 
break;
case 49:
this.$ = new Cout($$[$0], this._$.first_line, this._$.first_column);
break;
case 50:
 this.$.push($$[$0]); this.$ = $$[$0-2];
break;
case 51: case 64: case 80: case 83:
 this.$ = [$$[$0]]; 
break;
case 52:
 this.$ = new Fn_IF($$[$0-2], $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 53: case 54:
 this.$ = new Fn_IF($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 55:
 this.$ = new Incremento($$[$0-2], this._$.first_line, this._$.first_column);
break;
case 56:
 this.$ = new Decremento($$[$0-2], this._$.first_line, this._$.first_column);
break;
case 57:
 this.$ = TipoDatos.ENTERO; 
break;
case 58:
 this.$ = TipoDatos.DOBLE; 
break;
case 59:
 this.$ = TipoDatos.BOOLEANO; 
break;
case 60:
 this.$ = TipoDatos.CARACTER; 
break;
case 61:
 this.$ = TipoDatos.CADENA; 
break;
case 62:
 this.$ = TipoDatos.VOID; 
break;
case 63: case 79: case 82:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 65:
 this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 66:
 this.$ = new Declaracion($$[$0-1], $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 67:
 this.$ = new Asignacion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 68:
 this.$ = new CWhile($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 69:
 this.$ = new Break(this._$.first_line, this._$.first_column); 
break;
case 70:
 this.$ = new Continue(this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = new Return($$[$0], this._$.first_line, this._$.first_column); 
break;
case 72:
 this.$ = new Return(null, this._$.first_line, this._$.first_column); 
break;
case 73:
 this.$ = new DoWhile($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 74:
 this.$ = new CFor($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 77:
 this.$ = new Funcion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 78:
 this.$ = new Funcion($$[$0-4], $$[$0-3], [], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 81:
 this.$ = {id: $$[$0], tipo: $$[$0-1], valor: null}; 
break;
case 84:
 this.$ = new Llamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 85:
 this.$ = new Llamada($$[$0-2], [], this._$.first_line, this._$.first_column); 
break;
case 86:
 this.$ = new Execute($$[$0], this._$.first_line, this._$.first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,41:$V0,56:$V1,59:$V2,61:20,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,80:$Vf},{1:[3]},{5:[1,35],6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,41:$V0,56:$V1,59:$V2,61:20,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,80:$Vf},o($Vg,[2,3]),{8:[1,37]},o($Vg,[2,5]),{8:[1,38]},{8:[1,39]},o($Vg,[2,8]),{8:[1,40]},{8:[1,41]},o($Vg,[2,11]),{8:[1,42]},o($Vg,[2,13]),o($Vg,[2,14]),{8:[1,43]},{8:[1,44]},{8:[1,45]},{57:[1,46]},{36:[1,47]},{41:[1,49],68:48},{23:$Vh,24:$Vi,36:$Vj,69:$Vk},{36:[1,54]},{8:[2,69]},{8:[2,70]},{53:55,54:$Vl},{36:[1,57]},{8:[2,72],19:72,22:58,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:74,41:[1,75]},{41:[2,57]},{41:[2,58]},{41:[2,59]},{41:[2,60]},{41:[2,61]},{41:[2,62]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,4]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,12]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),{19:72,22:77,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx,58:76},{19:72,22:78,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{8:[2,66],37:[1,80],69:[1,79]},o($Vy,$Vz,{36:[1,81]}),{19:72,22:82,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{24:[1,83]},{23:[1,84]},{19:72,22:87,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,38:[1,86],39:69,40:70,41:$Vw,52:$Vx,79:85},{19:72,22:88,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{70:[1,89]},{4:90,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,41:$V0,55:[1,91],56:$V1,59:$V2,61:20,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,80:$Vf},{10:92,61:93,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8},{8:[2,71],23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN},{19:72,22:108,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},o($VO,[2,24]),o($VO,[2,25]),o($VO,[2,26]),o($VO,[2,27]),o($VO,[2,28]),o($VO,[2,29]),o($VO,[2,30]),{36:[1,109]},{19:72,22:110,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},o($VO,[2,33]),o($VO,[2,34]),o($VO,[2,35],{36:$Vj}),o($VO,[2,37]),{19:72,22:111,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{8:[2,86]},{36:$Vj},{8:[2,49],57:[1,112]},o($VP,[2,51],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN}),{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,38:[1,113],42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN},{19:72,22:114,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{41:[1,115]},{38:[1,117],61:119,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,77:116,78:118},o($VQ,[2,67],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN}),o($VQ,[2,55]),o($VQ,[2,56]),{37:[1,121],38:[1,120]},o($VO,[2,85]),o($VR,[2,83],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN}),{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,38:[1,122],42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN},{36:[1,123]},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,41:$V0,55:[1,124],56:$V1,59:$V2,61:20,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,70:$V9,71:$Va,72:$Vb,73:$Vc,74:$Vd,75:$Ve,80:$Vf},o($VS,[2,48]),{8:[1,125]},{41:[1,126],68:48},{19:72,22:127,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:128,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:129,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:130,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:131,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:132,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:133,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:134,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:135,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:136,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:137,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:138,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:139,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:140,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},o($VO,[2,18]),{19:72,22:141,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,38:[1,142],42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN},o($VT,[2,46],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN}),{19:72,22:143,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{53:144,54:$Vl},{8:[2,65],23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN},o($Vy,[2,63]),{37:[1,146],38:[1,145]},{53:147,54:$Vl},o($VR,[2,80]),{41:[1,148]},o($VO,[2,84]),{19:72,22:149,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{53:150,54:$Vl},{19:72,22:151,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},o($VS,[2,47]),{19:72,22:152,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},o($Vy,$Vz),o($VU,[2,19],{25:$VC,26:$VD,27:$VE}),o($VU,[2,20],{25:$VC,26:$VD,27:$VE}),o($VO,[2,21]),o($VO,[2,22]),o($VO,[2,23]),{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,42:$VF,43:[1,153],44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN},o($VV,[2,38],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE}),o($VV,[2,39],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE}),o($VV,[2,40],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE}),o($VV,[2,41],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE}),o($VV,[2,42],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE}),o($VV,[2,43],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE}),o([8,37,38,42,43,50,51,57],[2,44],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL}),o([8,37,38,42,43,51,57],[2,45],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM}),{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,37:[1,154],42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN},o($VO,[2,32]),o($VP,[2,50],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN}),o($Vg,[2,52],{60:[1,155]}),{53:156,54:$Vl},{61:119,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,67:$V8,78:157},o($Vg,[2,78]),o($VR,[2,81]),o($VR,[2,82],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN}),o($Vg,[2,68]),{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,38:[1,158],42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN},{8:[1,159],23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN},{19:72,22:160,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{19:72,22:161,23:$Vm,28:$Vn,29:$Vo,30:$Vp,31:$Vq,32:$Vr,33:$Vs,34:$Vt,35:$Vu,36:$Vv,39:69,40:70,41:$Vw,52:$Vx},{9:163,53:162,54:$Vl,59:$V2},o($Vg,[2,77]),o($VR,[2,79]),o($Vg,[2,73]),{11:166,16:165,41:[1,167],76:164},o($VT,[2,36],{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN}),{23:$VA,24:$VB,25:$VC,26:$VD,27:$VE,38:[1,168],42:$VF,44:$VG,45:$VH,46:$VI,47:$VJ,48:$VK,49:$VL,50:$VM,51:$VN},o($Vg,[2,53]),o($Vg,[2,54]),{38:[1,169]},{38:[2,75]},{38:[2,76]},{23:$Vh,24:$Vi,69:$Vk},o($VO,[2,31]),{53:170,54:$Vl},o($Vg,[2,74])],
defaultActions: {23:[2,69],24:[2,70],29:[2,57],30:[2,58],31:[2,59],32:[2,60],33:[2,61],34:[2,62],35:[2,1],74:[2,86],165:[2,75],166:[2,76]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // Importar librerías
    const {Aritmetica}= require('./dist/src/expresion/Aritmetica');
    const {Primitivo} = require('./dist/src/expresion/Primitivo');
    const {Relacional} = require('./dist/src/expresion/Relacional');
    const {Resultado, OperadorAritmetico, TipoDatos, OperadorRelacional, OperadorLogico, variables} = require('./dist/src/expresion/Resultado');
    const {AST} = require('./dist/src/AST');
    const {Cout} = require('./dist/src/instruccion/Cout');
    const {Logico} = require('./dist/src/expresion/Logico');
    const {Bloque} = require('./dist/src/instruccion/Bloque');
    const {Fn_IF} = require('./dist/src/instruccion/control/Fn_IF');
    const {Acceso} = require('./dist/src/expresion/Acceso');
    const {Asignacion} = require('./dist/src/instruccion/Asignacion');
    const {Declaracion} = require('./dist/src/instruccion/definiciones/Declaracion');
    const {Break} = require('./dist/src/instruccion/control/Break');
    const {CWhile} = require('./dist/src/instruccion/ciclos/While');
    const {Continue} = require('./dist/src/instruccion/control/Continue');
    const {DoWhile} = require('./dist/src/instruccion/ciclos/DoWhile');
    const {Ternario} = require('./dist/src/expresion/Ternario');
    const {Incremento} = require('./dist/src/instruccion/Incremento');
    const {Decremento} = require('./dist/src/instruccion/Decremento');
    const {CFor} = require('./dist/src/instruccion/ciclos/For');
    const {Llamada} = require('./dist/src/instruccion/Llamada');
    const {Funcion} = require('./dist/src/instruccion/definiciones/Funcion');
        const {Return} = require('./dist/src/instruccion/control/Return');
        const {Execute} = require('./dist/src/instruccion/Execute');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignora espacios
break;
case 1:console.log("Comentario")
break;
case 2:console.log("Comentario Multilinea")
break;
case 3:return 62;
break;
case 4:return 63;
break;
case 5:return 64;
break;
case 6:return 65;
break;
case 7:return 66;
break;
case 8:return 'EXEC';
break;
case 9:return 32;
break;
case 10:return 33;
break;
case 11:return 35;
break;
case 12:return 36;
break;
case 13:return 38;
break;
case 14:return 37;
break;
case 15:return 27;
break;
case 16:return 44;
break;
case 17:return 45;
break;
case 18:return 57;
break;
case 19:return 47;
break;
case 20:return 46;
break;
case 21:return 49;
break;
case 22:return 48;
break;
case 23:return 69;
break;
case 24:return 42;
break;
case 25:return 43;
break;
case 26:return 50;
break;
case 27:return 51;
break;
case 28:return 52;
break;
case 29:return 54;
break;
case 30:return 55;
break;
case 31:return 'CORIZQ';
break;
case 32:return 'CORDER';
break;
case 33:return 'NEW';
break;
case 34:return 59;
break;
case 35:return 60;
break;
case 36:return 'SWITCH';
break;
case 37:return 'CASE';
break;
case 38:return 'DEFAULT';
break;
case 39:return 71;
break;
case 40:return 70;
break;
case 41:return 75;
break;
case 42:return 74;
break;
case 43:return 72;
break;
case 44:return 73;
break;
case 45:return 67;
break;
case 46:return 56;
break;
case 47:return 'TOLOWER';
break;
case 48:return 'TOUPPER';
break;
case 49:return 'ROUND';
break;
case 50:return 'LENGTH';
break;
case 51:return 'TYPEOF';
break;
case 52:return 34;
break;
case 53:return 'TOSTRING';
break;
case 54:return 'C_STR';
break;
case 55:return 80;
break;
case 56:return 24;
break;
case 57:return 23;
break;
case 58:return 25;
break;
case 59:return 26;
break;
case 60:return 8;
break;
case 61: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 31; 
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 30; 
break;
case 63:return 29;
break;
case 64:return 28;
break;
case 65:return 41;
break;
case 66:return 5;
break;
case 67:    console.log(yy_.yylloc.first_line, yy_.yylloc.first_column,'Lexico',yy_.yytext);    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/[\s\S]*?\n)/i,/^(?:\/\*[\s\S]*?\*\/)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:EXEC\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:pow\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<<)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:endl\b)/i,/^(?:tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:'(?:\\.|[^\'])*')/i,/^(?:"(?:\\.|[^\"])*")/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}